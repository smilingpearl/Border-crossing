{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOgRc/rgjmlJ1BSRXjSpz42",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/smilingpearl/Border-crossing/blob/main/Border%20Crossing%20analysis%20codes%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install numpy\n",
        "!pip install pandas\n",
        "!pip install matplotlib\n",
        "!pip install seaborn\n",
        "!pip scipy import stats\n",
        "!pip statsmodels.tsa.seasonal import seasonal_decompose"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OaoQvuupU3gq",
        "outputId": "1e25ff5c-e7fe-4dd4-97af-4b9d50aa3475"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.58.5)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.0.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.9.0.post0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n",
            "Requirement already satisfied: numpy!=1.24.0,>=1.20 in /usr/local/lib/python3.11/dist-packages (from seaborn) (2.0.2)\n",
            "Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.11/dist-packages (from seaborn) (2.2.2)\n",
            "Requirement already satisfied: matplotlib!=3.6.1,>=3.4 in /usr/local/lib/python3.11/dist-packages (from seaborn) (3.10.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (4.58.5)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (11.2.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (3.2.3)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->seaborn) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->seaborn) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.4->seaborn) (1.17.0)\n",
            "ERROR: unknown command \"scipy\"\n",
            "ERROR: unknown command \"statsmodels.tsa.seasonal\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "metadata": {
        "id": "ExAoW1cvUxTy"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "from scipy import stats\n",
        "from statsmodels.tsa.seasonal import seasonal_decompose\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('./Border_Crossing_Entry_Data.csv')\n",
        "df"
      ],
      "metadata": {
        "id": "hhoMXpB7VknC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 614
        },
        "outputId": "65463b12-13d5-451f-8172-ec626be81d21"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Port Name       State  Port Code            Border        Date  \\\n",
              "0            Jackman       Maine        104  US-Canada Border  01/01/2024   \n",
              "1           Porthill       Idaho       3308  US-Canada Border  01/04/2024   \n",
              "2           San Luis     Arizona       2608  US-Mexico Border  01/04/2024   \n",
              "3       Willow Creek     Montana       3325  US-Canada Border  01/01/2024   \n",
              "4            Warroad   Minnesota       3423  US-Canada Border  01/01/2024   \n",
              "...              ...         ...        ...               ...         ...   \n",
              "400903    Ogdensburg    New York        701  US-Canada Border  01/04/2025   \n",
              "400904     Limestone       Maine        118  US-Canada Border  01/04/2025   \n",
              "400905     Van Buren       Maine        108  US-Canada Border  01/04/2025   \n",
              "400906         Ferry  Washington       3013  US-Canada Border  01/04/2025   \n",
              "400907      Calexico  California       2503  US-Mexico Border  01/04/2025   \n",
              "\n",
              "                            Measure   Value  Latitude  Longitude  \\\n",
              "0                            Trucks    6556    45.806    -70.397   \n",
              "1                            Trucks      98    49.000   -116.499   \n",
              "2                             Buses      10    32.485   -114.782   \n",
              "3                       Pedestrians       2    49.000   -109.731   \n",
              "4       Personal Vehicle Passengers    9266    48.999    -95.377   \n",
              "...                             ...     ...       ...        ...   \n",
              "400903  Personal Vehicle Passengers   22225    44.733    -75.458   \n",
              "400904            Personal Vehicles     658    46.925    -67.790   \n",
              "400905  Personal Vehicle Passengers    7812    47.160    -67.931   \n",
              "400906                       Trucks       1    49.000   -118.761   \n",
              "400907  Personal Vehicle Passengers  724961    32.673   -115.388   \n",
              "\n",
              "                                       Point  Year  Month Month_Name  \n",
              "0               POINT (-70.396722 45.805661)  2024      1    January  \n",
              "1               POINT (-116.49925 48.999861)  2024      4      April  \n",
              "2                POINT (-114.7822222 32.485)  2024      4      April  \n",
              "3              POINT (-109.731333 48.999972)  2024      1    January  \n",
              "4                  POINT (-95.376555 48.999)  2024      1    January  \n",
              "...                                      ...   ...    ...        ...  \n",
              "400903  POINT (-75.4577501759 44.7330898624)  2025      4      April  \n",
              "400904          POINT (-67.789597 46.924555)  2025      4      April  \n",
              "400905          POINT (-67.930799 47.159645)  2025      4      April  \n",
              "400906         POINT (-118.761166 49.000083)  2025      4      April  \n",
              "400907         POINT (-115.388018 32.673389)  2025      4      April  \n",
              "\n",
              "[400908 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e2f5026e-692a-4dd4-b4b2-cc400d9284cc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Port Name</th>\n",
              "      <th>State</th>\n",
              "      <th>Port Code</th>\n",
              "      <th>Border</th>\n",
              "      <th>Date</th>\n",
              "      <th>Measure</th>\n",
              "      <th>Value</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Point</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Month_Name</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Jackman</td>\n",
              "      <td>Maine</td>\n",
              "      <td>104</td>\n",
              "      <td>US-Canada Border</td>\n",
              "      <td>01/01/2024</td>\n",
              "      <td>Trucks</td>\n",
              "      <td>6556</td>\n",
              "      <td>45.806</td>\n",
              "      <td>-70.397</td>\n",
              "      <td>POINT (-70.396722 45.805661)</td>\n",
              "      <td>2024</td>\n",
              "      <td>1</td>\n",
              "      <td>January</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Porthill</td>\n",
              "      <td>Idaho</td>\n",
              "      <td>3308</td>\n",
              "      <td>US-Canada Border</td>\n",
              "      <td>01/04/2024</td>\n",
              "      <td>Trucks</td>\n",
              "      <td>98</td>\n",
              "      <td>49.000</td>\n",
              "      <td>-116.499</td>\n",
              "      <td>POINT (-116.49925 48.999861)</td>\n",
              "      <td>2024</td>\n",
              "      <td>4</td>\n",
              "      <td>April</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>San Luis</td>\n",
              "      <td>Arizona</td>\n",
              "      <td>2608</td>\n",
              "      <td>US-Mexico Border</td>\n",
              "      <td>01/04/2024</td>\n",
              "      <td>Buses</td>\n",
              "      <td>10</td>\n",
              "      <td>32.485</td>\n",
              "      <td>-114.782</td>\n",
              "      <td>POINT (-114.7822222 32.485)</td>\n",
              "      <td>2024</td>\n",
              "      <td>4</td>\n",
              "      <td>April</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Willow Creek</td>\n",
              "      <td>Montana</td>\n",
              "      <td>3325</td>\n",
              "      <td>US-Canada Border</td>\n",
              "      <td>01/01/2024</td>\n",
              "      <td>Pedestrians</td>\n",
              "      <td>2</td>\n",
              "      <td>49.000</td>\n",
              "      <td>-109.731</td>\n",
              "      <td>POINT (-109.731333 48.999972)</td>\n",
              "      <td>2024</td>\n",
              "      <td>1</td>\n",
              "      <td>January</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Warroad</td>\n",
              "      <td>Minnesota</td>\n",
              "      <td>3423</td>\n",
              "      <td>US-Canada Border</td>\n",
              "      <td>01/01/2024</td>\n",
              "      <td>Personal Vehicle Passengers</td>\n",
              "      <td>9266</td>\n",
              "      <td>48.999</td>\n",
              "      <td>-95.377</td>\n",
              "      <td>POINT (-95.376555 48.999)</td>\n",
              "      <td>2024</td>\n",
              "      <td>1</td>\n",
              "      <td>January</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>400903</th>\n",
              "      <td>Ogdensburg</td>\n",
              "      <td>New York</td>\n",
              "      <td>701</td>\n",
              "      <td>US-Canada Border</td>\n",
              "      <td>01/04/2025</td>\n",
              "      <td>Personal Vehicle Passengers</td>\n",
              "      <td>22225</td>\n",
              "      <td>44.733</td>\n",
              "      <td>-75.458</td>\n",
              "      <td>POINT (-75.4577501759 44.7330898624)</td>\n",
              "      <td>2025</td>\n",
              "      <td>4</td>\n",
              "      <td>April</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>400904</th>\n",
              "      <td>Limestone</td>\n",
              "      <td>Maine</td>\n",
              "      <td>118</td>\n",
              "      <td>US-Canada Border</td>\n",
              "      <td>01/04/2025</td>\n",
              "      <td>Personal Vehicles</td>\n",
              "      <td>658</td>\n",
              "      <td>46.925</td>\n",
              "      <td>-67.790</td>\n",
              "      <td>POINT (-67.789597 46.924555)</td>\n",
              "      <td>2025</td>\n",
              "      <td>4</td>\n",
              "      <td>April</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>400905</th>\n",
              "      <td>Van Buren</td>\n",
              "      <td>Maine</td>\n",
              "      <td>108</td>\n",
              "      <td>US-Canada Border</td>\n",
              "      <td>01/04/2025</td>\n",
              "      <td>Personal Vehicle Passengers</td>\n",
              "      <td>7812</td>\n",
              "      <td>47.160</td>\n",
              "      <td>-67.931</td>\n",
              "      <td>POINT (-67.930799 47.159645)</td>\n",
              "      <td>2025</td>\n",
              "      <td>4</td>\n",
              "      <td>April</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>400906</th>\n",
              "      <td>Ferry</td>\n",
              "      <td>Washington</td>\n",
              "      <td>3013</td>\n",
              "      <td>US-Canada Border</td>\n",
              "      <td>01/04/2025</td>\n",
              "      <td>Trucks</td>\n",
              "      <td>1</td>\n",
              "      <td>49.000</td>\n",
              "      <td>-118.761</td>\n",
              "      <td>POINT (-118.761166 49.000083)</td>\n",
              "      <td>2025</td>\n",
              "      <td>4</td>\n",
              "      <td>April</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>400907</th>\n",
              "      <td>Calexico</td>\n",
              "      <td>California</td>\n",
              "      <td>2503</td>\n",
              "      <td>US-Mexico Border</td>\n",
              "      <td>01/04/2025</td>\n",
              "      <td>Personal Vehicle Passengers</td>\n",
              "      <td>724961</td>\n",
              "      <td>32.673</td>\n",
              "      <td>-115.388</td>\n",
              "      <td>POINT (-115.388018 32.673389)</td>\n",
              "      <td>2025</td>\n",
              "      <td>4</td>\n",
              "      <td>April</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>400908 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2f5026e-692a-4dd4-b4b2-cc400d9284cc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e2f5026e-692a-4dd4-b4b2-cc400d9284cc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e2f5026e-692a-4dd4-b4b2-cc400d9284cc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-23cdddea-36de-4d24-9f06-889211411090\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-23cdddea-36de-4d24-9f06-889211411090')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-23cdddea-36de-4d24-9f06-889211411090 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_73e52d34-2dc9-4c82-921d-92ca68b0b088\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_73e52d34-2dc9-4c82-921d-92ca68b0b088 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Set plot style for better aesthetics\n",
        "sns.set_style(\"whitegrid\")\n",
        "plt.rcParams['figure.figsize'] = (12, 6)\n",
        "plt.rcParams['font.family'] = 'sans-serif'\n",
        "plt.rcParams['font.sans-serif'] = ['Arial'] # Ensure Arial font is used for plots\n"
      ],
      "metadata": {
        "id": "ol058-utd6e_"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the dataset\n",
        "try:\n",
        "    df = pd.read_csv('Border_Crossing_Entry_Data.csv')\n",
        "    print(\"Dataset loaded successfully for Python analysis.\")\n",
        "except FileNotFoundError:\n",
        "    print(\"Error: 'Border_Crossing_Entry_Data.csv' not found. Please ensure the file is in the correct directory for Python processing.\")\n",
        "    exit()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T84AQZwSXtNa",
        "outputId": "cf93a304-6d12-42c2-f379-75dcab280d32"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset loaded successfully for Python analysis.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Initial Data Inspection ---\n",
        "print(\"\\n--- Initial Data Info ---\")\n",
        "df.info() # Provides a summary of the DataFrame, including data types and non-null counts\n",
        "print(\"\\n--- First 5 rows of the dataset ---\")\n",
        "print(df.head()) # Displays the first 5 rows to get a glimpse of the data\n",
        "\n",
        "# --- Data Preparation Steps ---\n",
        "print(\"\\n--- Data Preparation ---\")\n",
        "\n",
        "# Convert 'Date' column to datetime objects for time-series analysis\n",
        "df['Date'] = pd.to_datetime(df['Date'])\n",
        "\n",
        "# Extract 'Year' and 'Month' as new features from the 'Date' column\n",
        "df['Year'] = df['Date'].dt.year\n",
        "df['Month'] = df['Date'].dt.month\n",
        "df['Month_Name'] = df['Date'].dt.strftime('%b') # Extract abbreviated month name (e.g., Jan, Feb)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g9oYlAGpYQUP",
        "outputId": "6dfdb61e-4d05-44ef-fdce-a94e7d82be0b"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Initial Data Info ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 400908 entries, 0 to 400907\n",
            "Data columns (total 13 columns):\n",
            " #   Column      Non-Null Count   Dtype  \n",
            "---  ------      --------------   -----  \n",
            " 0   Port Name   400908 non-null  object \n",
            " 1   State       400908 non-null  object \n",
            " 2   Port Code   400908 non-null  int64  \n",
            " 3   Border      400908 non-null  object \n",
            " 4   Date        400908 non-null  object \n",
            " 5   Measure     400908 non-null  object \n",
            " 6   Value       400908 non-null  int64  \n",
            " 7   Latitude    400908 non-null  float64\n",
            " 8   Longitude   400908 non-null  float64\n",
            " 9   Point       400908 non-null  object \n",
            " 10  Year        400908 non-null  int64  \n",
            " 11  Month       400908 non-null  int64  \n",
            " 12  Month_Name  400908 non-null  object \n",
            "dtypes: float64(2), int64(4), object(7)\n",
            "memory usage: 39.8+ MB\n",
            "\n",
            "--- First 5 rows of the dataset ---\n",
            "      Port Name      State  Port Code            Border        Date  \\\n",
            "0       Jackman      Maine        104  US-Canada Border  01/01/2024   \n",
            "1      Porthill      Idaho       3308  US-Canada Border  01/04/2024   \n",
            "2      San Luis    Arizona       2608  US-Mexico Border  01/04/2024   \n",
            "3  Willow Creek    Montana       3325  US-Canada Border  01/01/2024   \n",
            "4       Warroad  Minnesota       3423  US-Canada Border  01/01/2024   \n",
            "\n",
            "                       Measure  Value  Latitude  Longitude  \\\n",
            "0                       Trucks   6556    45.806    -70.397   \n",
            "1                       Trucks     98    49.000   -116.499   \n",
            "2                        Buses     10    32.485   -114.782   \n",
            "3                  Pedestrians      2    49.000   -109.731   \n",
            "4  Personal Vehicle Passengers   9266    48.999    -95.377   \n",
            "\n",
            "                           Point  Year  Month Month_Name  \n",
            "0   POINT (-70.396722 45.805661)  2024      1    January  \n",
            "1   POINT (-116.49925 48.999861)  2024      4      April  \n",
            "2    POINT (-114.7822222 32.485)  2024      4      April  \n",
            "3  POINT (-109.731333 48.999972)  2024      1    January  \n",
            "4      POINT (-95.376555 48.999)  2024      1    January  \n",
            "\n",
            "--- Data Preparation ---\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Rename columns for easier and more consistent access in our code\n",
        "df.rename(columns={'Port Name': 'Port_Name', 'Measure': 'Transport_Mode', 'Value': 'Crossings'}, inplace=True)\n",
        "\n",
        "# Check for any missing values across all columns\n",
        "# Our initial inspection (df.info()) showed no nulls, so this confirms it.\n",
        "print(\"\\nMissing values after initial preparation:\")\n",
        "print(df.isnull().sum())\n",
        "\n",
        "# Aggregate data to ensure unique monthly crossings per mode/port combination\n",
        "# This step is crucial to avoid double-counting if the raw data had multiple entries for the same month/port/mode.\n",
        "# We sum 'Crossings' for each unique combination of these dimensions.\n",
        "df_agg = df.groupby(['Port_Name', 'Border', 'Date', 'Year', 'Month', 'Month_Name', 'Transport_Mode'])['Crossings'].sum().reset_index()\n",
        "\n",
        "print(\"\\nData preparation complete. Aggregated DataFrame (df_agg) is ready for analysis.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "caC2gGzgYox8",
        "outputId": "2270cdca-fdee-436e-a684-eea6df14ffbd"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Missing values after initial preparation:\n",
            "Port_Name         0\n",
            "State             0\n",
            "Port Code         0\n",
            "Border            0\n",
            "Date              0\n",
            "Transport_Mode    0\n",
            "Crossings         0\n",
            "Latitude          0\n",
            "Longitude         0\n",
            "Point             0\n",
            "Year              0\n",
            "Month             0\n",
            "Month_Name        0\n",
            "dtype: int64\n",
            "\n",
            "Data preparation complete. Aggregated DataFrame (df_agg) is ready for analysis.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n--- 1. Descriptive Statistics ---\")\n",
        "print(\"Purpose: To summarize the central tendency, dispersion, and shape of the data distributions.\")\n",
        "\n",
        "# Overall descriptive statistics for 'Crossings'\n",
        "print(\"\\nOverall Descriptive Statistics for Border Crossings:\")\n",
        "print(df_agg['Crossings'].describe())\n",
        "\n",
        "# Descriptive statistics for 'Crossings' grouped by 'Border'\n",
        "print(\"\\nDescriptive Statistics for Crossings by Border:\")\n",
        "print(df_agg.groupby('Border')['Crossings'].describe())\n",
        "\n",
        "# Descriptive statistics for 'Crossings' grouped by 'Transport_Mode'\n",
        "print(\"\\nDescriptive Statistics for Crossings by Transport Mode:\")\n",
        "print(df_agg.groupby('Transport_Mode')['Crossings'].describe())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5R-4LKc_Y59R",
        "outputId": "c460786c-f49a-477b-e808-273db38c1f9a"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- 1. Descriptive Statistics ---\n",
            "Purpose: To summarize the central tendency, dispersion, and shape of the data distributions.\n",
            "\n",
            "Overall Descriptive Statistics for Border Crossings:\n",
            "count    3.982750e+05\n",
            "mean     2.917084e+04\n",
            "std      1.499500e+05\n",
            "min      0.000000e+00\n",
            "25%      0.000000e+00\n",
            "50%      1.520000e+02\n",
            "75%      3.068000e+03\n",
            "max      4.447374e+06\n",
            "Name: Crossings, dtype: float64\n",
            "\n",
            "Descriptive Statistics for Crossings by Border:\n",
            "                     count          mean            std  min  25%     50%  \\\n",
            "Border                                                                      \n",
            "US-Canada Border  303659.0  10072.870638   63659.040055  0.0  0.0    87.0   \n",
            "US-Mexico Border   94616.0  90463.522438  276975.219581  0.0  0.0  1508.0   \n",
            "\n",
            "                       75%        max  \n",
            "Border                                 \n",
            "US-Canada Border   1505.00  2523598.0  \n",
            "US-Mexico Border  35065.75  4447374.0  \n",
            "\n",
            "Descriptive Statistics for Crossings by Transport Mode:\n",
            "                               count           mean            std  min  \\\n",
            "Transport_Mode                                                            \n",
            "Bus Passengers               31543.0    5005.568399   16424.193405  0.0   \n",
            "Buses                        31559.0     298.975189     962.565727  0.0   \n",
            "Pedestrians                  32512.0   38927.655512  117105.336720  0.0   \n",
            "Personal Vehicle Passengers  37709.0  168745.619534  400279.950901  0.0   \n",
            "Personal Vehicles            37734.0   81338.642603  191229.091065  0.0   \n",
            "Rail Containers Empty        29712.0     996.308865    2840.667534  0.0   \n",
            "Rail Containers Loaded       29613.0    1744.052342    5223.250219  0.0   \n",
            "Train Passengers             29192.0     248.593622    1273.922054  0.0   \n",
            "Trains                       29734.0      36.813917      78.671370  0.0   \n",
            "Truck Containers Empty       36437.0    2348.702583    6625.700154  0.0   \n",
            "Truck Containers Loaded      35909.0    6890.434153   20718.287929  0.0   \n",
            "Trucks                       36621.0    9011.300128   24263.775016  0.0   \n",
            "\n",
            "                                 25%      50%       75%        max  \n",
            "Transport_Mode                                                      \n",
            "Bus Passengers                  0.00    158.0    1548.0   513477.0  \n",
            "Buses                           0.00      7.0      85.0    27876.0  \n",
            "Pedestrians                     0.00     28.0    3919.0  1227544.0  \n",
            "Personal Vehicle Passengers  2484.00  16942.0  116412.0  4447374.0  \n",
            "Personal Vehicles            1258.25   8906.5   56213.5  1744349.0  \n",
            "Rail Containers Empty           0.00      0.0     299.0    26398.0  \n",
            "Rail Containers Loaded          0.00      0.0     461.0    70372.0  \n",
            "Train Passengers                0.00      0.0      50.0    27777.0  \n",
            "Trains                          0.00      0.0      29.0      800.0  \n",
            "Truck Containers Empty         17.00    232.0    1052.0    72890.0  \n",
            "Truck Containers Loaded        29.00    438.0    3322.0   452331.0  \n",
            "Trucks                        115.00    883.0    4828.0   267884.0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n--- 2. Analysis of Variance (ANOVA) ---\")\n",
        "print(\"Purpose: To determine if there are statistically significant differences in the mean number of crossings among different transport modes.\")\n",
        "\n",
        "# Prepare data for ANOVA: Create a list of crossing values for each transport mode\n",
        "transport_modes = df_agg['Transport_Mode'].unique()\n",
        "data_for_anova = [df_agg[df_agg['Transport_Mode'] == mode]['Crossings'] for mode in transport_modes]\n",
        "\n",
        "# Perform one-way ANOVA\n",
        "f_statistic, p_value = stats.f_oneway(*data_for_anova)\n",
        "\n",
        "print(f\"\\nANOVA F-statistic: {f_statistic:.2f}\")\n",
        "print(f\"ANOVA P-value: {p_value:.3e}\") # Using scientific notation for small p-values\n",
        "\n",
        "# Interpret the result\n",
        "alpha = 0.05\n",
        "if p_value < alpha:\n",
        "    print(f\"Interpretation: Since the p-value ({p_value:.3e}) is less than the significance level (alpha={alpha}), we reject the null hypothesis.\")\n",
        "    print(\"Conclusion: There is a statistically significant difference in the mean number of crossings among the different transport modes.\")\n",
        "else:\n",
        "    print(f\"Interpretation: Since the p-value ({p_value:.3e}) is greater than the significance level (alpha={alpha}), we fail to reject the null hypothesis.\")\n",
        "    print(\"Conclusion: There is no statistically significant difference in the mean number of crossings among the different transport modes.\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l4T80zd8Y827",
        "outputId": "313851e7-36ef-405e-fa9e-3c4117f5aaf5"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- 2. Analysis of Variance (ANOVA) ---\n",
            "Purpose: To determine if there are statistically significant differences in the mean number of crossings among different transport modes.\n",
            "\n",
            "ANOVA F-statistic: 4754.95\n",
            "ANOVA P-value: 0.000e+00\n",
            "Interpretation: Since the p-value (0.000e+00) is less than the significance level (alpha=0.05), we reject the null hypothesis.\n",
            "Conclusion: There is a statistically significant difference in the mean number of crossings among the different transport modes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n--- 3. Time Series Analysis (Trend and Seasonality) ---\")\n",
        "print(\"Purpose: To decompose the overall border crossing time series into its underlying trend, seasonal, and residual components.\")\n",
        "\n",
        "# Aggregate total crossings by Date to create a single time series\n",
        "# Set 'Date' as the index for time series decomposition\n",
        "monthly_total_crossings = df_agg.groupby('Date')['Crossings'].sum().sort_index()\n",
        "\n",
        "# Resample to monthly frequency (if not already strictly monthly and continuous)\n",
        "# Ensure the time series has a regular frequency for decomposition\n",
        "monthly_total_crossings = monthly_total_crossings.asfreq('MS') # 'MS' for Month Start frequency\n",
        "\n",
        "# Handle potential missing values after resampling (e.g., fill with mean or interpolate)\n",
        "# For decomposition, it's best to have no NaNs. Linear interpolation is a common approach.\n",
        "monthly_total_crossings = monthly_total_crossings.interpolate(method='linear')\n",
        "\n",
        "# Perform seasonal decomposition (additive model is often suitable for data with constant seasonal amplitude)\n",
        "# The period should be 12 for monthly data (12 months in a year)\n",
        "try:\n",
        "    decomposition = seasonal_decompose(monthly_total_crossings, model='additive', period=12)\n",
        "\n",
        "    # Plot the decomposed components\n",
        "    fig = decomposition.plot()\n",
        "    fig.set_size_inches(15, 10)\n",
        "    fig.suptitle('Time Series Decomposition of Total Monthly Border Crossings', y=1.02, fontsize=16)\n",
        "    plt.tight_layout(rect=[0, 0.03, 1, 0.98]) # Adjust layout to prevent title overlap\n",
        "    plt.show()\n",
        "\n",
        "    # Print summary of decomposition components (e.g., mean of seasonal component, trend range)\n",
        "    print(\"\\nSummary of Time Series Decomposition:\")\n",
        "    print(f\"Mean of Seasonal Component: {decomposition.seasonal.mean():,.2f}\")\n",
        "    print(f\"Trend component range (min to max): {decomposition.trend.min():,.0f} to {decomposition.trend.max():,.0f}\")\n",
        "    print(f\"Residual component standard deviation: {decomposition.resid.std():,.2f}\")\n",
        "\n",
        "except ValueError as e:\n",
        "    print(f\"Error during seasonal decomposition: {e}\")\n",
        "    print(\"This often happens if the time series is too short or has too many missing values after resampling for the chosen period.\")\n",
        "    print(f\"Number of data points: {len(monthly_total_crossings)}\")\n",
        "    print(f\"Number of NaNs in time series: {monthly_total_crossings.isnull().sum()}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "NxexOw3BMfRK",
        "outputId": "cf466433-6b6e-42cd-cbae-88ef1c3bc8b5"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- 3. Time Series Analysis (Trend and Seasonality) ---\n",
            "Purpose: To decompose the overall border crossing time series into its underlying trend, seasonal, and residual components.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Summary of Time Series Decomposition:\n",
            "Mean of Seasonal Component: -16.88\n",
            "Trend component range (min to max): 17,978,568 to 42,542,975\n",
            "Residual component standard deviation: 309,343.07\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n--- Answering Analysis Question 1: Trend Analysis ---\")\n",
        "\n",
        "# --- Yearly Trends by Transport Mode ---\n",
        "# Aggregate total crossings by Year and Transport Mode to observe long-term trends.\n",
        "yearly_mode_trends = df_agg.groupby(['Year', 'Transport_Mode'])['Crossings'].sum().unstack(fill_value=0)\n",
        "\n",
        "# Plotting Yearly Trends by Transport Mode using a line chart.\n",
        "plt.figure(figsize=(14, 8))\n",
        "yearly_mode_trends.plot(kind='line', marker='o', ax=plt.gca(), cmap='viridis')\n",
        "plt.title('Yearly Border Crossings by Transport Mode', fontsize=16)\n",
        "plt.xlabel('Year', fontsize=12)\n",
        "plt.ylabel('Total Crossings', fontsize=12)\n",
        "plt.xticks(yearly_mode_trends.index, rotation=45)\n",
        "plt.ticklabel_format(style='plain', axis='y')\n",
        "plt.legend(title='Transport Mode', bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "xgJ7a2PIqIA7",
        "outputId": "300c5636-d6a0-4034-d95e-696f7a812296"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Answering Analysis Question 1: Trend Analysis ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Monthly Seasonality by Transport Mode ---\n",
        "# Aggregate total crossings by Month Name and Transport Mode to identify seasonal patterns.\n",
        "month_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n",
        "monthly_mode_trends = df_agg.groupby(['Month_Name', 'Transport_Mode'])['Crossings'].sum().unstack(fill_value=0).reindex(month_order)\n",
        "\n",
        "# Plotting Monthly Trends by Transport Mode (Seasonality) using a line chart.\n",
        "plt.figure(figsize=(14, 8))\n",
        "monthly_mode_trends.plot(kind='line', marker='o', ax=plt.gca(), cmap='viridis')\n",
        "plt.title('Monthly Average Border Crossings by Transport Mode (Seasonality)', fontsize=16)\n",
        "plt.xlabel('Month', fontsize=12)\n",
        "plt.ylabel('Total Crossings', fontsize=12)\n",
        "plt.ticklabel_format(style='plain', axis='y')\n",
        "plt.legend(title='Transport Mode', bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6qFLsBh9qHrp",
        "outputId": "d94fbc99-433c-492e-eb3b-0b2acbf59af1"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Top 10 Ports by Total Crossings ---\n",
        "# Calculate the sum of crossings for each port and get the top 10.\n",
        "top_ports = df_agg.groupby('Port_Name')['Crossings'].sum().nlargest(10)\n",
        "\n",
        "# Plotting Top 10 Ports using a horizontal bar chart.\n",
        "plt.figure(figsize=(12, 7))\n",
        "top_ports.plot(kind='barh', color='#00A1E4')\n",
        "plt.title('Top 10 Ports by Total Border Crossings', fontsize=16)\n",
        "plt.xlabel('Total Crossings', fontsize=12)\n",
        "plt.ylabel('Port Name', fontsize=12)\n",
        "plt.ticklabel_format(style='plain', axis='x')\n",
        "plt.gca().invert_yaxis() # Invert y-axis to have the largest bar at the top\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "cLf6gGtwqHJR",
        "outputId": "88ccd0cc-6660-461a-8e5f-37384a86560e"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n--- Answering Analysis Question 2: Regional Comparison ---\")\n",
        "\n",
        "# --- Total Crossings by Border ---\n",
        "# Aggregate total crossings by the 'Border' column to compare overall volumes.\n",
        "border_traffic = df_agg.groupby('Border')['Crossings'].sum()\n",
        "\n",
        "# Plotting Total Crossings by Border using a bar chart.\n",
        "plt.figure(figsize=(8, 6))\n",
        "border_traffic.plot(kind='bar', color=['#00529B', '#F7931E'])\n",
        "plt.title('Total Border Crossings: US-Canada vs US-Mexico', fontsize=16)\n",
        "plt.xlabel('Border', fontsize=12)\n",
        "plt.ylabel('Total Crossings', fontsize=12)\n",
        "plt.ticklabel_format(style='plain', axis='y')\n",
        "plt.xticks(rotation=0)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "8z9cSfoeZjMf",
        "outputId": "64885a86-7a7a-43b6-edda-a2b47ad5ee67"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Answering Analysis Question 2: Regional Comparison ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Monthly Seasonality by Border ---\n",
        "# Aggregate crossings by Month Name and Border to compare seasonality between the two borders.\n",
        "month_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n",
        "monthly_border_trends = df_agg.groupby(['Month_Name', 'Border'])['Crossings'].sum().unstack(fill_value=0).reindex(month_order)\n",
        "\n",
        "# Plotting Monthly Seasonality by Border using a line chart.\n",
        "plt.figure(figsize=(14, 8))\n",
        "monthly_border_trends.plot(kind='line', marker='o', ax=plt.gca(), color=['#00529B', '#F7931E'])\n",
        "plt.title('Monthly Average Border Crossings: US-Canada vs US-Mexico (Seasonality)', fontsize=16)\n",
        "plt.xlabel('Month', fontsize=12)\n",
        "plt.ylabel('Total Crossings', fontsize=12)\n",
        "plt.ticklabel_format(style='plain', axis='y')\n",
        "plt.legend(title='Border')\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "m-TRC1ngxZck",
        "outputId": "ced6ceb4-b7a8-439f-8aa0-ba8e3bda4fd4"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "CQcZAjb7xZEG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n--- Answering Analysis Question 3: Event Impact (COVID-19) ---\")\n",
        "\n",
        "# --- Aggregate Crossings by Defined Periods (Pre/During/Post COVID-19) ---\n",
        "# Create a copy of the aggregated DataFrame to add a 'Period' column.\n",
        "df_event = df_agg.copy()\n",
        "# Assign periods based on dates for COVID-19 impact analysis.\n",
        "df_event['Period'] = 'Pre-COVID' # Default to Pre-COVID\n",
        "df_event.loc[df_event['Date'] >= '2020-03-01', 'Period'] = 'During-COVID' # From March 2020 onwards\n",
        "df_event.loc[df_event['Date'] >= '2022-01-01', 'Period'] = 'Post-COVID' # From January 2022 onwards\n",
        "\n",
        "# Aggregate total crossings for each defined period.\n",
        "period_trends = df_event.groupby('Period')['Crossings'].sum().reindex(['Pre-COVID', 'During-COVID', 'Post-COVID'])\n",
        "\n",
        "# Plotting Event Impact using a bar chart.\n",
        "plt.figure(figsize=(10, 7))\n",
        "period_trends.plot(kind='bar', color=['#00A1E4', '#F7931E', '#00B8D4'])\n",
        "plt.title('Impact of COVID-19 on Total Border Crossings', fontsize=16)\n",
        "plt.xlabel('Period', fontsize=12)\n",
        "plt.ylabel('Total Crossings', fontsize=12)\n",
        "plt.ticklabel_format(style='plain', axis='y')\n",
        "plt.xticks(rotation=0)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "aPtkReJOZVKb",
        "outputId": "fffed034-6b08-4647-daa0-a5348e68ebce"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Answering Analysis Question 3: Event Impact (COVID-19) ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n--- Answering Analysis Question 4: Volume & Outliers ---\")\n",
        "\n",
        "# --- Total crossing volumes ---\n",
        "total_crossings_overall = df_agg['Crossings'].sum()\n",
        "print(f\"\\nOverall Total Border Crossings: {total_crossings_overall:,.0f}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xzXO1sz8Zpa2",
        "outputId": "9074b303-36eb-42ae-b6db-a8e15121d1a6"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Answering Analysis Question 4: Volume & Outliers ---\n",
            "\n",
            "Overall Total Border Crossings: 11,618,014,464\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Yearly total crossings ---\n",
        "yearly_totals = df_agg.groupby('Year')['Crossings'].sum()\n",
        "print(\"\\nTotal Crossings by Year:\")\n",
        "print(yearly_totals)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qcYVaOk9ZwRp",
        "outputId": "e073311e-d8ac-42c7-aead-02bf34119a19"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Total Crossings by Year:\n",
            "Year\n",
            "1996    429790351\n",
            "1997    494174198\n",
            "1998    508588404\n",
            "1999    538456724\n",
            "2000    540021542\n",
            "2001    493083902\n",
            "2002    475702818\n",
            "2003    456392653\n",
            "2004    458220298\n",
            "2005    450234268\n",
            "2006    440296022\n",
            "2007    417587175\n",
            "2008    399902033\n",
            "2009    359451762\n",
            "2010    344246536\n",
            "2011    332226000\n",
            "2012    344503916\n",
            "2013    356218438\n",
            "2014    363314116\n",
            "2015    365219998\n",
            "2016    367484183\n",
            "2017    372971276\n",
            "2018    379157157\n",
            "2019    370200015\n",
            "2020    200531716\n",
            "2021    224159112\n",
            "2022    310481511\n",
            "2023    347890030\n",
            "2024    366523458\n",
            "2025    110984852\n",
            "Name: Crossings, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Calculate Year-over-Year (YoY) Change ---\n",
        "yoy_change = yearly_totals.pct_change() * 100\n",
        "print(\"\\nYear-over-Year Change in Total Crossings (%):\")\n",
        "print(yoy_change)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lqG8BicXZ3g4",
        "outputId": "39bc21cf-cd91-4089-f634-63ca5cb67da5"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Year-over-Year Change in Total Crossings (%):\n",
            "Year\n",
            "1996          NaN\n",
            "1997    14.980291\n",
            "1998     2.916827\n",
            "1999     5.872788\n",
            "2000     0.290612\n",
            "2001    -8.691809\n",
            "2002    -3.524975\n",
            "2003    -4.059292\n",
            "2004     0.400455\n",
            "2005    -1.742836\n",
            "2006    -2.207350\n",
            "2007    -5.157632\n",
            "2008    -4.235078\n",
            "2009   -10.115045\n",
            "2010    -4.230116\n",
            "2011    -3.491839\n",
            "2012     3.695652\n",
            "2013     3.400403\n",
            "2014     1.991946\n",
            "2015     0.524582\n",
            "2016     0.619951\n",
            "2017     1.493151\n",
            "2018     1.658541\n",
            "2019    -2.362382\n",
            "2020   -45.831521\n",
            "2021    11.782374\n",
            "2022    38.509431\n",
            "2023    12.048550\n",
            "2024     5.356126\n",
            "2025   -69.719577\n",
            "Name: Crossings, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Top 10 Ports by average monthly crossings ---\n",
        "avg_monthly_ports = df_agg.groupby('Port_Name')['Crossings'].mean().nlargest(10)\n",
        "print(\"\\nTop 10 Ports by Average Monthly Crossings:\")\n",
        "print(avg_monthly_ports)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mFB8fnmWa0b6",
        "outputId": "2e3b74c1-5b3f-4996-d33a-0075d737baa0"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Top 10 Ports by Average Monthly Crossings:\n",
            "Port_Name\n",
            "San Ysidro               404624.550833\n",
            "El Paso                  312988.785441\n",
            "Laredo                   192095.513973\n",
            "Calexico                 187762.332418\n",
            "Hidalgo                  174128.102315\n",
            "Ysleta                   149532.089189\n",
            "Brownsville              147927.709732\n",
            "Buffalo Niagara Falls    145709.525577\n",
            "Cross Border Xpress      142909.571429\n",
            "Otay Mesa                141715.918758\n",
            "Name: Crossings, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Identifying Outlier Months ---\n",
        "month_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n",
        "avg_crossings_per_month = df_agg.groupby('Month_Name')['Crossings'].mean().reindex(month_order)\n",
        "overall_monthly_avg = avg_crossings_per_month.mean()\n",
        "std_dev_monthly = avg_crossings_per_month.std()\n",
        "\n",
        "# Define thresholds for outliers (e.g., 2 standard deviations from the mean).\n",
        "outlier_threshold_low = overall_monthly_avg - (2 * std_dev_monthly)\n",
        "outlier_threshold_high = overall_monthly_avg + (2 * std_dev_monthly)\n",
        "\n",
        "print(\"\\nOutlier Months (based on average monthly crossings):\")\n",
        "for month, avg_val in avg_crossings_per_month.items():\n",
        "    if avg_val < outlier_threshold_low:\n",
        "        print(f\"  {month}: {avg_val:,.2f} (Significantly Low)\")\n",
        "    elif avg_val > outlier_threshold_high:\n",
        "        print(f\"  {month}: {avg_val:,.2f} (Significantly High)\")\n",
        "    else:\n",
        "        print(f\"  {month}: {avg_val:,.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PeuqxePQbAOt",
        "outputId": "2d7c0d04-327d-48ca-d952-078980dfb84a"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Outlier Months (based on average monthly crossings):\n",
            "  Jan: 29,170.84\n",
            "  Feb: nan\n",
            "  Mar: nan\n",
            "  Apr: nan\n",
            "  May: nan\n",
            "  Jun: nan\n",
            "  Jul: nan\n",
            "  Aug: nan\n",
            "  Sep: nan\n",
            "  Oct: nan\n",
            "  Nov: nan\n",
            "  Dec: nan\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Outlier Ports (using the Interquartile Range (IQR) method for total port crossings) ---\n",
        "port_totals = df_agg.groupby('Port_Name')['Crossings'].sum()\n",
        "Q1 = port_totals.quantile(0.25) # First quartile\n",
        "Q3 = port_totals.quantile(0.75) # Third quartile\n",
        "IQR = Q3 - Q1 # Interquartile Range\n",
        "lower_bound = Q1 - 1.5 * IQR # Lower bound for outliers\n",
        "upper_bound = Q3 + 1.5 * IQR # Upper bound for outliers\n",
        "\n",
        "# Identify ports whose total crossings fall outside these bounds.\n",
        "outlier_ports_low = port_totals[port_totals < lower_bound]\n",
        "outlier_ports_high = port_totals[port_totals > upper_bound]\n",
        "\n",
        "print(\"\\nOutlier Ports (based on total crossings - IQR method):\")\n",
        "if not outlier_ports_high.empty:\n",
        "    print(\"\\n  Significantly High Volume Ports:\")\n",
        "    print(outlier_ports_high.sort_values(ascending=False))\n",
        "else:\n",
        "    print(\"  No significantly high volume outlier ports detected.\")\n",
        "\n",
        "if not outlier_ports_low.empty:\n",
        "    print(\"\\n  Significantly Low Volume Ports:\")\n",
        "    print(outlier_ports_low.sort_values())\n",
        "else:\n",
        "    print(\"  No significantly low volume outlier ports detected.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K0NEHlZGbJH4",
        "outputId": "9b523986-65e2-4573-ccf2-d1884e61f0bd"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Outlier Ports (based on total crossings - IQR method):\n",
            "\n",
            "  Significantly High Volume Ports:\n",
            "Port_Name\n",
            "San Ysidro               1408902686\n",
            "El Paso                  1307041168\n",
            "Laredo                    790473040\n",
            "Hidalgo                   662035045\n",
            "Calexico                  615672688\n",
            "Buffalo Niagara Falls     612417136\n",
            "Brownsville               607982887\n",
            "Otay Mesa                 570406573\n",
            "Detroit                   548073834\n",
            "Nogales                   480511942\n",
            "Blaine                    330336198\n",
            "San Luis                  323485312\n",
            "Eagle Pass                311752638\n",
            "Calexico East             277474683\n",
            "Port Huron                216147558\n",
            "Douglas                   189529488\n",
            "Del Rio                   161158966\n",
            "Name: Crossings, dtype: int64\n",
            "  No significantly low volume outlier ports detected.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Example visualization for Yearly Total Crossings (provides a visual summary of annual volumes)\n",
        "plt.figure(figsize=(12, 7))\n",
        "yearly_totals.plot(kind='bar', color='#00B8D4')\n",
        "plt.title('Total Border Crossings by Year', fontsize=16)\n",
        "plt.xlabel('Year', fontsize=12)\n",
        "plt.ylabel('Total Crossings', fontsize=12)\n",
        "plt.ticklabel_format(style='plain', axis='y')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "QMGkvcqGbZMo",
        "outputId": "60e0d4a9-c5bc-470a-d46a-c7b890e769bd"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n",
            "WARNING:matplotlib.font_manager:findfont: Generic family 'sans-serif' not found because none of the following families were found: Arial\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x700 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABKQAAAKyCAYAAADrfAZsAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAkMZJREFUeJzs3XlcFfXi//H34QiI4gruWibEJqiYZXox01xLyyUVFTWXsq5Li7lecylzq8yrdTU1LRUzzS1zqZstWmp6E0QNTTETxQ1MhFRAmN8f/jhfUUBAGA74ej4e93E7M3Nm3hyG4+HNZz5jMQzDEAAAAAAAAGASh8IOAAAAAAAAgHsLhRQAAAAAAABMRSEFAAAAAAAAU1FIAQAAAAAAwFQUUgAAAAAAADAVhRQAAAAAAABMRSEFAAAAAAAAU1FIAQAAAAAAwFQUUgAAAAAAADBVicIOAADAvczb2zvXz3nkkUe0bNmyAkiTey1bttTp06e1bds21axZM0fPmTt3rj744IPbljs6Osrd3V0NGjRQ37591bBhw/yOe1f69OmjPXv2aOnSpWrcuHFhx8kgKipKq1at0i+//KIzZ84oMTFRrq6uql27th555BF16tRJHh4ehR3zrqWfO0OHDtWwYcMKO06+WLt2rcaOHavOnTtr+vTphZLh9ddf18aNG/XYY49p4cKFWW4XHx+vDh066Pz585oyZYq6detmYkoAQHFDIQUAQCHq3LnzbcsuXLign376Kcv1derUydUxfvnlF/Xt29euiixJcnd3V7NmzWyPL1++rMOHD2vLli3aunWrJkyYoF69ehViQvt3/fp1zZw5U8uWLVNaWprKly8vf39/lS9fXgkJCTp06JDCw8O1aNEi/etf/1JISEhhR4YdmjBhgvbs2aPt27dr5cqVCg4OznS7N998U+fPn9fjjz9OGQUAuGsUUgAAFKLMRkT88ssvtkKqsEZMmKFOnTq3fX2pqamaOXOmPvnkE02fPl3t2rVTxYoVCymh/Rs5cqQ2b94sV1dX/etf/9Izzzwjq9VqW28Yhn7++WfNmjVLf/75ZyEmzR+9e/fWk08+qQoVKhR2lGKlbNmyevvttzVo0CDNmDFD//jHP1SrVq0M22zdulVfffWVypcvrylTphRSUgBAccIcUgAAwG5YrVa99tprslqtSkpK0r59+wo7kt364osvtHnzZjk6Omrx4sXq0qVLhjJKkiwWi4KCgvT555/rySefLKSk+adixYry8PCgpCwAzZo1U3BwsK5cuaLRo0crLS3Nti42NlaTJk2SJE2cOFGVKlUqpJQAgOKEEVIAABQxZ8+e1cKFC7Vjxw6dOXNGTk5OevDBB9WpUyd169YtQymRPu+RJO3ZsyfDnFU1atTQd999J0m6ePGivvrqK+3YsUNRUVGKjY1ViRIlVLt2bbVr1079+vWTs7OzKV+fs7OzypQpo0uXLik1NTXTbXbs2KHly5crIiJCCQkJKl++vBo1aqSBAwcqICDgtu1vnv/JarVq0aJFCg8P16VLlzR16lR16dJFknTmzBnNmTNHO3bsUHx8vKpVq6b27dvrpZdeumPurVu3avXq1Tp06JASExNVoUIFNW7cWC+++KI8PT0zbHvq1Ck98cQTqlGjhv773/9q6dKl2rBhg/78809duXJFR44cyfZYhmFo/vz5kqTg4GDVr18/2+0dHR0VGBhoe3zzZZwLFizQggULtHXrVsXExMjNzc12XkjSpk2btGrVKkVGRurKlSuqVKmSHn30Ub3wwgt64IEHbjvW+fPntWDBAu3YsUMxMTFycHBQ+fLlVbt2bT322GMaOHBghu137typpUuXKiIiQvHx8SpVqpQqVKigevXqqUePHnr44Ydt22Y1h9TN8zBNmDBB8+bN09atW3XmzBmVK1dOQUFBeu2111SlSpVMX59vv/1WixcvVmRkpBwcHOTr66tBgwbJ09PT9n26+TWRpIMHD2rRokXat2+fLl68KCcnJ1WoUEF+fn565pln1KpVq2y/J5n566+/NGfOHH3//feKjY1VpUqV1Lp1aw0ZMkTlypWzbbdmzRqNGzdOQUFB+vjjjzPd17lz59SyZUtZrVb9+OOPORpVNnr0aO3cuVO//vqrPv74Yz3//POSpDfeeEN//fWXOnTokKHYPHfunBYvXqzt27fbvtd16tRR586dFRwcrBIlMv6qkdf3mfT3rSNHjmjNmjVatWqVjh07psTExFzNXwcAsC8UUgAAFCERERF6/vnndenSJVWvXl2tWrVSQkKC9uzZo7CwMP33v//VvHnz5OTkJOnGqAcnJyf99NNPt83ZdPMvqDt27NDbb7+tKlWq6P7771eDBg108eJF7d+/X++9956+++47LV261LbfghQdHa1Lly5J0m1FjiTNnj1b8+bNk8ViUWBgoKpXr66oqCht2bJF33zzjd588009++yzme5769atWrlyperUqaOmTZsqPj7e9jVFRUWpT58+iouLU6VKldSyZUtdvXpVn3zyiX755Zcs816/fl2vv/66tmzZIicnJ9WtW1dVqlTRiRMntHHjRv33v//V3Llz9dhjj932XMMwNHToUO3YsUONGjWSh4eHjh49esfX6MiRI4qOjpaU+TxjOZWUlKQ+ffooKipKjRo1ko+Pj+21NwxDY8aM0fr161WiRAk1atRIbm5uOnTokNauXastW7Zozpw5Gb6uCxcuqGvXrjp//ryqV6+uZs2aydnZWefPn9fhw4d16NChDIXUunXrNHbsWElSvXr11LhxY127dk3nzp3T5s2bVaFChQyF1J0kJCQoODhYZ86c0UMPPaQHH3xQ4eHhWr9+vfbu3asNGzaoTJkyGZ6zcOFCvfvuu5Kk+vXrq1atWvrzzz81ePBgDRo0KNPj7Nq1S88//7xSUlLk4+OjBg0aKC0tTefOndMPP/yg1NTUXBdS8fHx6t69uy5duqRHHnlEFotFe/bs0aeffqrt27drxYoVtpFhHTt21Lvvvquff/5Zf/zxR6bF4Oeff67r16/r6aefzvEljqVKldL06dMVEhJi+94eOnRI3333nSpXrqwJEybYtt27d6+GDBmi+Ph41ahRQ02bNlVycrIOHDigt956S99//73mz58vR0dH23Pu9n3mrbfe0ooVKxQYGKjHH39c0dHRslgsuXmZAQD2xAAAAHZl9+7dhpeXl+Hl5ZVheVJSktGiRQvDy8vLmDBhgpGcnGxbd/LkSdu6WbNmZbq/kJCQLI957NgxIyws7Lblly5dMgYMGGB4eXkZCxcuvG19+jGjo6Nz/PXNmTMn0zyXL182du7caTzzzDOGl5eX8corr9z23B9//NHw8vIyAgICjJ9++inDulWrVhleXl5G3bp1jd9//z3DupCQENtrunz58kxzde3a1fDy8jJefvll49q1a7blp0+fNlq1amV7/u7duzM8b9asWYaXl5fRrVs34+TJkxnWbdmyxfD19TUefvhhIz4+3rY8Ojratr/HHnvMOH78eDav2O1Wr15t+1pTUlJy9VzDyHiOdezY0Th//vxt26xYscLw8vIyGjdubPz222+25WlpabbvYaNGjYy4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ExMTbRPHp88DdPXqVS1ZsiTTubX+97//6fLly7JarZmOCsovvXv3loODgzZv3qxvv/02w7pvvvlG33zzTabP+/jjjzMdMRcVFWUb6ZPb+a8Mw9CkSZNsxY0kJSQkaNKkSTIMQ23atMl0jixHR0f17NlT169ft90ZMSQkJFfHzq1BgwapbNmy+uSTT7R48eLb5uaSbrwn3TzZur29zwAACh+X7AEAUEQ4OTnp3//+t55//nl99tln2r59u+rXr6+///5bu3fvVlJSkoKCgjRkyJAMz6tevbr8/f118OBBdezYUf7+/nJ2dlaFChX0+uuvq2LFiurdu7eWLl2q5557To0aNVLlypX1xx9/6NChQ3rppZc0b968fP96jh8/rjFjxtgeX7t2TadPn7aN9vHx8dGrr76a4TnNmze35enfv78aNmyoatWq2bJarVZNmjRJDz74YK7zzJw5U3369NGmTZu0d+9ePfTQQ7p27Zp2794tb29vBQYGZnqnvBEjRuj8+fP66quv1KlTJ/n4+KhWrVqyWq06e/asDh8+rCtXrmjhwoV5muw6O++9954qVaqk0NBQjRkzRtOnT1dAQIDKlSunxMREHTp0SBcuXJDVas3yzoRZCQ4OVlhYmDZs2KCuXbvq4Ycflpubmw4dOqQ//vhDJUuW1LvvvmubYF26UeKMHj1alStXlq+vr8qWLavLly9r3759SkhIkJeXl7p16ybpxvxX06dP18yZM+Xl5aX7779fjo6OOn36tG0014svvphh//nN399fr7zyimbNmqUhQ4aoQYMGqlmzpk6ePKmIiAgNGDBAixcvto0yTDdv3jzNnDlTderUkYeHh5ydnXX+/Hnt27dP169fV6dOnXJ9GWXLli119OhRtWrVSo0bN5bFYtGePXt06dIl1a5dWxMmTMjyucHBwZo/f76Sk5Pl7e2d6Uiq/FS1alX95z//0bBhwzRjxgwtWrRIDz74oCpVqqTExERFRUXp5MmTql+/vm0OsMJ6nwEA2C8KKQAAipB69epp/fr1WrhwobZv367//ve/cnJykp+fn5555hl169Yt08th5s6dq/fee0+//PKLtmzZouvXr6tGjRp6/fXXJUnjxo2Tt7e3VqxYoYMHD8pqtcrLy0vvv/++nnzyyQL5RTE2NjbDpXdWq1VlypRRo0aN1LZtWwUHB2c6KfMrr7yi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0pEjR/Tee+9pz5496tixo8qUKaOuXbtq+vTp2r17tw4ePKhx48YpMDDQVuAEBQXJ09NTo0aN0uHDh7Vjxw7Nnj1bvXv3tuUJDg5WdHS0Zs6cqaioKIWGhmrLli167rnnbDn69++vVatWad26dYqKitKkSZN09epVdenSRZLsKgsAAAAAAEBRk6dL9jp27KgPP/xQ586d07Fjx1SuXDk98cQTtvWHDh1S7dq1c73fuLg4jR49WufPn1eZMmXk7e2tjz/+WP/4xz8kSePGjZODg4OGDx+u5ORkBQUFaeLEibbnW61WzZ8/X5MmTVKPHj3k4uKizp07a/jw4bZtatWqpY8++kjTpk3T0qVLVbVqVU2ZMkXNmjWzbfPkk0/q4sWLmjNnji5cuCBfX18tWrQow2Vy9pQFAAAAAACgKMlTIfXiiy8qJSVFP/74o6pVq6bp06fb5lK6dOmS9uzZo759++Z6v1OnTs12vbOzsyZOnJih+LlVjRo1tHDhwmz307hxY61fvz7bbUJCQhQSElIksgAAAAAAABQleSqkSpQooVdffVWvvvrqbevKly+vn3/++a6DAQAAAAAAoHjKUyF1s7///ltnz56VJFWtWlWlS5e+61AAAAAAAAAovvJcSEVEROidd97Rvn37lJaWJklycHDQQw89pJEjRyogICDfQgIAAAAAAKD4yFMhtX//fvXp00eOjo569tln5eHhIUmKiorSpk2bFBISomXLlqlevXr5GhYAAAAAAABFX54Kqffff19VqlTRihUrVKlSpQzrhg0bpp49e+r999/XkiVL8iUkAAAAAAAAig+HvDxp//796tGjx21llCS5u7ure/fuCg8Pv9tsAAAAAAAAKIbyVEg5ODgoNTU1y/VpaWlycMjTrgEAAAAAAFDM5ak1CgwMVGhoqE6fPn3bupiYGK1YsUINGza863AAAAAAAAAofvI0h9Rrr72m3r17q3379mrdurVq164tSfrjjz+0bds2Wa1WjRgxIj9zAgAAAAAAoJjIUyHl5+en1atX6/3339d3332nq1evSpJcXFzUrFkzvfLKK/L09MzXoAAAAAAAACgecl1IJScna8eOHapRo4Y+/PBDpaWl6eLFi5KkihUrMncUAAAAAAAAspXr9sjR0VEvv/yywsLCbuzAwUHu7u5yd3enjAIAAAAAAMAd5bpBslgsql27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qVIlSVJcXJwqV65sWx4XFycfHx9JN0YXXbx4McPzrl+/rvj4eNvz3d3dbxtdlP44fSRSZtvExcXZ1ttTltwICAjI17Y4O97e3qYcJyfIkjmyZM2e8pAlc2TJmj3lIUvmyJI1e8pDlsyRJWv2lIcsmSNL1uwpD1kyV1SypKamZjsY5mZFppCqWbOmKlWqpF27dsnX11fSjbvU7d+/Xz179pQkBQYG6vLlyzp48KD8/f0lSbt371ZaWprq1asnSWrQoIFmz56tlJQUOTo6SpJ27typBx54QOXKlbNts3v3bj333HO24+/cuVMNGjSwuyy5YbVaTSukzDpOTpAlc2TJmj3lIUvmyJI1e8pDlsyRJWv2lIcsmSNL1uwpD1kyR5as2VMesmSuOGaxq0nN//77b0VGRioyMlLSjcnDIyMjFRMTI4vFor59+2revHnatm2bjhw5olGjRqly5cpq1aqVJMnDw0PNmjXTG2+8oYiICP36669666239NRTT6lKlSqSpI4dO8rR0VH/+te/dPToUW3evFlLly5V//79bTn69u2rHTt2aPHixYqKitLcuXN18OBBhYSESJJdZQEAAAAAAChq7GqE1MGDB9W3b1/b42nTpkmSOnfurOnTp+v555/X1atXNWHCBF2+fFkPPfSQFi1aJGdnZ9tz3n33Xb311lvq16+fHBwc1KZNG40fP962vkyZMvr444/15ptvqkuXLqpQoYL++c9/qkePHrZtGjZsqHfffVezZ8/WrFmzVLt2bX344Yfy8vKybWNPWQAAAAAAAIoSuyqkGjdurCNHjmS53mKx6OWXX9bLL7+c5Tbly5fXe++9l+1xfHx8tGLFimy3ad++vdq3b18ksgAAAAAAABQldnXJHgAAAAAAAIo/CikAAAAAAACYikIKAAAAAAAApqKQAgAAAAAAgKkopAAAAAAAAGAqCikAAAAAAACYikIKAAAAAAAApqKQAgAAAAAAgKkopAAAAAAAAGAqCikAAAAAAACYikIKAAAAAAAApqKQAgAAAAAAgKkopAAAAAAAAGAqCikAAAAAAACYikIKAAAAAAAApqKQAgAAAAAAgKkopAAAAAAAAGAqCikAAAAAAACYikIKAAAAAAAApqKQAgAAAAAAgKkopAAAAAAAAGAqCikAAAAAAACYikIKAAAAAAAApqKQAgAAAAAAgKkopAAA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kO3788EHH2j16tUaMmSIkpKS9Mcff2jUqFFasmSJadfUlytXTkePHtXZs2fVo0cPlSpVSu+9957i4+P13HPPydHRsUB/xh0cHBQcHKzz58+rU6dOql27tmrXrq2xY8fKw8NDP/zwg1auXKl58+Zp6tSpGX7eCkrlypW1f/9+rV69WmXLltXMmTNtZcP8+fM1ceJE1a9fP0Mxk9/Kly+viRMnql69epJufKCrWLGi/vnPf2rEiBF69tln9cgjjxTY8TNTunRpPfjgg1q5cqXc3d0VHh6uzz77TBMnTlTFihV1+PBh/etf/9J9992nRo0aFWgWwzBUpkwZHT9+XElJSXJ2dlZ0dLTCwsL0xhtvyNnZWcuWLZO/v78cHBwK/Bcjb29vffHFFzp37pyqVKlie38bMGCAYmJiNGPGDPn5+WV4LyoIAQEBGjNmjHx8fCTdeJ2WL1+uefPm6cUXX9TDDz8sSbbPDQX1+cFisahChQpq1qyZatSoYcuSkpKi5ORkXb58Od+PeSdBQUHy8fGRm5ubJGnRokVasWKFRowYIWdnZx0+fFgvvfSS1qxZY/t3qqBZrVZFR0crMjJSrVq1kqurq4YNG6aEhARt2LBBLi4uun79uq2gKQjBwcGKjY3VP//5T9WoUUO+vr568803dd999+nQoUP6+OOPNWXKFC1YsMD22hWkcuXKKSIiQuvXr1fFihU1adIk23HTz++mTZvqoYceKrAMrq6uGjNmjG0OoLS0NLm6uur5559X79699fXXX6tt27YFdvzMODs7y9fXV4sXL1aFChUUFRWlNWvWaOrUqapTp46OHTumkSNHytvbW61bty7QLE5OTqpevboOHDigDh06yNXVVadPn9a2bdv03nvvyc3NTR999JEaN25s++NxQeHz7+34/Jsz98rnX0ZIIU8Mw5CTk5NKly6tefPm6fz583rmmWfk6ekpFxcXvfbaa/L399fy5cslFexcInXr1rWVUemNto+Pj5o0aaLFixfrypUrppRR6cfu1KmTHnjgAfXt21cDBw7UrFmz9NFHH+mdd97RZ599phYtWuizzz4r0Dmc0rO0aNFCjo6OmjZtmuLi4nTgwAENHTpUDz74oObNm6eSJUtq48aNBZbjVo0aNdK1a9e0du3aDF9/tWrV1KJFC0VGRppytzBnZ+cMExx37dpVffr0UWRkpJYu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ERGRRXFCioiIiIiIiIiILIoTUkREREREREREZFGckCIiIiJ6TUVGRsLT0xPp6enPfO3hw4fw9fVFSEgIiouLK6GOiIiIqjJOSBERERG9pmbPno3CwkIsWLDgma8tW7YMWVlZiI2NhY0Nh4RERERkWRx9EBEREb2mXF1dER0djT179uDIkSPK7WfPnsXf/vY3REREwN3dXdWG/Px8HoFFREREz9CJiFR2BBERERGpo6ioCO+++y6ePHmCPXv2QK/XIyQkBDk5OdizZw9SUlKwfPlyHD9+HE+ePEGrVq0QHR2Nvn37Kv+N7OxsrFmzBkeOHEFycjJ0Oh26dOmCDz/8sMyE1okTJzBq1CgsW7YMiYmJ2LFjB+7fv4+TJ0+idu3alfHrExERkZXSV3YAEREREalHr9cjNjYW7733HlatWoW6devi/PnzWLduHZKTkxEaGgoXFxeMHTsWDg4O2L9/P6Kjo7FixQr069cPAHD79m0cOnQIfn5+aNKkCdLT05GQkICwsDDs3bsXLi4uZX7mqlWrYGtrizFjxqCgoAC2traV8asTERGRFeMRUkRERERVQGxsLBISEmBra4s//OEPWLp0KSIiIpCRkYHt27fDzs4OACAiCA0NRVZWFg4cOAAAKCgogF6vL3OtqeTkZPj7+2P8+PGIjo4G8P8jpFxdXbFnzx7Y29tb/hclIiIiTeA1pIiIiIiqgClTpqBOnTqwsbHBjBkzkJ2djePHj8Pf3x+5ubnIzMxEZmYmsrKy4Ovri6SkJKSmpgIA7OzslMkog8GArKwsODg4oEWLFrhw4cIzPys4OJiTUURERPRCPGWPiIiIqApwdHREixYtkJWVhfr16+Ps2bMQESxfvhzLly8v93syMjLg4uKC4uJifPfdd9i8eTOSk5NhMBiU+9SpU+eZ72vSpIlavwYRERG9JjghRURERFQFGVe+Gz16NHr27FnufZo2bQoA+Prrr7F8+XIMGTIEkyZNgpOTE2xsbDB//nyUd/UHHh1FREREL8MJKSIiIqIqyNXVFQBga2sLb2/vF973wIED6N69O+bPn1/m9gcPHsDZ2Vm1RiIiInp98RpSRERERFVQvXr14OXlhYSEBKSlpT3z9czMTOXf1apVe+ZIqP379yvXmCIiIiIyFY+QIiIiIqqiZs+ejeHDh2PgwIEYOnQoXF1dkZ6ejtOnT+PevXv4/vvvAQC9e/dGXFwcZsyYgc6dOyMxMRE//PCDcpQVERERkak4IUVERERURb311lvYvn07Vq5ciZ07dyI7Oxt169ZF27ZtER0drdxv/PjxePLkCX744Qfs27cPbdu2xZo1a7B06dJKrCciIiIt00l5V6IkIiIiIiIiIiJSCa8hRUREREREREREFsUJKSIiIiIiIiIisihOSBERERERERERkUVxQoqIiIiIiIiIiCyKE1JERERERERERGRRnJAiIiIiIiIiIiKL4oQUERERERERERFZFCekiIiIiIiIiIjIojghRUREREREREREFsUJKSIiIiIiIiIisihOSBERERERERERkUVxQoqIiIiIiIiIiCyKE1JERERERERERGRR/wXS4peVbMVPRwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}